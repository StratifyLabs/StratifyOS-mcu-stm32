cmake_minimum_required (VERSION 3.6)

#Add sources to the project
set(SOURCES_PREFIX ${CMAKE_SOURCE_DIR}/src)
add_subdirectory(src)
file(GLOB LDSCRIPT_SOURCES "${CMAKE_SOURCE_DIR}/ldscript/*")
set(SHARED_SOURCELIST ${SOURCES} ${LDSCRIPT_SOURCES} ${CMAKE_SOURCE_DIR}/include/stm32_arch.h ${CMAKE_SOURCE_DIR}/README.md)

if( ${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Darwin" )
  set(SOS_TOOLCHAIN_CMAKE_PATH /Applications/StratifyLabs-SDK/Tools/gcc/arm-none-eabi/cmake)
endif()
if( ${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Windows" )
  set(SOS_TOOLCHAIN_CMAKE_PATH C:/StratifyLabs-SDK/Tools/gcc/arm-none-eabi/cmake)
endif()
set(CMAKE_TOOLCHAIN_FILE ${SOS_TOOLCHAIN_CMAKE_PATH}/sos-lib-toolchain.cmake)
set(SOS_LIB_NAME sos)
project(${SOS_LIB_NAME} C ASM)

option(BUILD_ALL "Build All configurations" ON)

option(BUILD_STM32F4 "Build All F4 configurations" OFF)
option(BUILD_STM32F401xC "Build F401xC configuration" OFF)
option(BUILD_STM32F401xE "Build F401xE configuration" OFF)
option(BUILD_STM32F411 "Build F411 configuration" OFF)
option(BUILD_STM32F412 "Build F412 configuration" OFF)
option(BUILD_STM32F417 "Build F417 configuration" OFF)
option(BUILD_STM32F429 "Build F429 configuration" OFF)
option(BUILD_STM32F446 "Build F446 configuration" OFF)

option(BUILD_STM32F7 "Build All F7 configurations" OFF)
option(BUILD_STM32F722 "Build F722 configuration" OFF)
option(BUILD_STM32F723 "Build F723 configuration" OFF)
option(BUILD_STM32F746 "Build F746 configuration" OFF)
option(BUILD_STM32F767 "Build F767 configuration" OFF)

option(BUILD_STM32L4 "Build All L4 configurations" OFF)
option(BUILD_STM32L475 "Build L475 configuration" OFF)
option(BUILD_STM32L432 "Build L432 configuration" OFF)

option(BUILD_STM32H7 "Build All H7 configurations" OFF)
option(BUILD_STM32H743 "Build H743 configuration" OFF)
option(BUILD_STM32H750 "Build H750 configuration" OFF)

if(BUILD_STM32F401xC OR BUILD_STM32F4 OR BUILD_ALL)
set(STM32_VARIANT stm32f401xc)
set(STM32_VARIANT_DEFINE STM32F401xC)
include(${CMAKE_SOURCE_DIR}/stm32f4.cmake)
endif()

if(BUILD_STM32F401xE OR BUILD_STM32F4 OR BUILD_ALL)
set(STM32_VARIANT stm32f401xe)
set(STM32_VARIANT_DEFINE STM32F401xE)
include(${CMAKE_SOURCE_DIR}/stm32f4.cmake)
endif()

if(BUILD_STM32F411 OR BUILD_STM32F4 OR BUILD_ALL)
set(STM32_VARIANT stm32f411xe)
set(STM32_VARIANT_DEFINE STM32F411xE)
include(${CMAKE_SOURCE_DIR}/stm32f4.cmake)
endif()

if(BUILD_STM32F412 OR BUILD_STM32F4 OR BUILD_ALL)
set(STM32_VARIANT stm32f412zx)
set(STM32_VARIANT_DEFINE STM32F412Zx)
include(${CMAKE_SOURCE_DIR}/stm32f4.cmake)
endif()

if(BUILD_STM32F417 OR BUILD_STM32F4 OR BUILD_ALL)
set(STM32_VARIANT stm32f417xx)
set(STM32_VARIANT_DEFINE STM32F417xx)
include(${CMAKE_SOURCE_DIR}/stm32f4.cmake)
endif()

if(BUILD_STM32F429 OR BUILD_STM32F4 OR BUILD_ALL)
set(STM32_VARIANT stm32f429xx)
set(STM32_VARIANT_DEFINE STM32F429xx)
include(${CMAKE_SOURCE_DIR}/stm32f4.cmake)
endif()

if(BUILD_STM32F446 OR BUILD_STM32F4 OR BUILD_ALL)
set(STM32_VARIANT stm32f446xx)
set(STM32_VARIANT_DEFINE STM32F446xx)
include(${CMAKE_SOURCE_DIR}/stm32f4.cmake)
endif()

if(BUILD_STM32F722 OR BUILD_STM32F7 OR BUILD_ALL)
set(STM32_VARIANT stm32f722xx)
set(STM32_VARIANT_DEFINE STM32F722xx)
set(STM32_ARCH_FPU v7em_f5sh)
include(${CMAKE_SOURCE_DIR}/stm32f7.cmake)
endif()

if(BUILD_STM32F723 OR BUILD_STM32F7 OR BUILD_ALL)
set(STM32_VARIANT stm32f723xx)
set(STM32_VARIANT_DEFINE STM32F723xx)
set(STM32_ARCH_FPU v7em_f5sh)
include(${CMAKE_SOURCE_DIR}/stm32f7.cmake)
endif()

if(BUILD_STM32F746 OR BUILD_STM32F7 OR BUILD_ALL)
set(STM32_VARIANT stm32f746xx)
set(STM32_VARIANT_DEFINE STM32F746xx)
set(STM32_ARCH_FPU v7em_f5sh)
include(${CMAKE_SOURCE_DIR}/stm32f7.cmake)
endif()

if(BUILD_STM32F767 OR BUILD_STM32F7 OR BUILD_ALL)
set(STM32_VARIANT stm32f767xx)
set(STM32_VARIANT_DEFINE STM32F767xx)
set(STM32_ARCH_FPU v7em_f5dh)
include(${CMAKE_SOURCE_DIR}/stm32f7.cmake)
endif()

if(BUILD_STM32L475 OR BUILD_STM32L4 OR BUILD_ALL)
set(STM32_VARIANT stm32l475xx)
set(STM32_VARIANT_DEFINE STM32L475xx)
set(STM32_ARCH_FPU v7em_f4sh)
include(${CMAKE_SOURCE_DIR}/stm32l4.cmake)
endif()

if(BUILD_STM32L432 OR BUILD_STM32L4 OR BUILD_ALL)
set(STM32_VARIANT stm32l432xx)
set(STM32_VARIANT_DEFINE STM32L432xx)
set(STM32_ARCH_FPU v7em_f4sh)
include(${CMAKE_SOURCE_DIR}/stm32l4.cmake)
endif()

if(BUILD_STM32H743 OR BUILD_STM32H7 OR BUILD_ALL)
set(STM32_VARIANT stm32h743xx)
set(STM32_VARIANT_DEFINE STM32H743xx)
set(STM32_ARCH_FPU v7em_f5dh)
include(${CMAKE_SOURCE_DIR}/stm32h7.cmake)
endif()

if(BUILD_STM32H750 OR BUILD_STM32H7 OR BUILD_ALL)
set(STM32_VARIANT stm32h750xx)
set(STM32_VARIANT_DEFINE STM32H750xx)
set(STM32_ARCH_FPU v7em_f5dh)
include(${CMAKE_SOURCE_DIR}/stm32h7.cmake)
endif()


file(GLOB STM32F3XX_HEADERS ${CMAKE_SOURCE_DIR}/src/stm32f3xx/*.h)
file(GLOB STM32L4XX_HEADERS ${CMAKE_SOURCE_DIR}/src/stm32l4xx/*.h)
file(GLOB STM32F4XX_HEADERS ${CMAKE_SOURCE_DIR}/src/stm32f4xx/*.h)
file(GLOB STM32F7XX_HEADERS ${CMAKE_SOURCE_DIR}/src/stm32f7xx/*.h)
file(GLOB STM32H7XX_HEADERS ${CMAKE_SOURCE_DIR}/src/stm32h7xx/*.h)

install(FILES ${STM32F3XX_HEADERS} DESTINATION include/mcu/arch/stm32/stm32f3xx)
install(FILES ${STM32L4XX_HEADERS} DESTINATION include/mcu/arch/stm32/stm32l4xx)
install(FILES ${STM32F4XX_HEADERS} DESTINATION include/mcu/arch/stm32/stm32f4xx)
install(FILES ${STM32F7XX_HEADERS} DESTINATION include/mcu/arch/stm32/stm32f7xx)
install(FILES ${STM32H7XX_HEADERS} DESTINATION include/mcu/arch/stm32/stm32fhxx)
install(DIRECTORY include/ DESTINATION include/mcu/arch/stm32)
install(DIRECTORY ldscript/ DESTINATION lib/ldscripts)
