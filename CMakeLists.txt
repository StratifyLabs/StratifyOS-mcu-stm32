cmake_minimum_required (VERSION 3.6)

#Add sources to the project
set(SOURCES_PREFIX ${CMAKE_SOURCE_DIR}/src)
add_subdirectory(src)
file(GLOB LDSCRIPT_SOURCES "${CMAKE_SOURCE_DIR}/ldscript/*")
set(SHARED_SOURCELIST ${SOURCES} ${LDSCRIPT_SOURCES} ${CMAKE_SOURCE_DIR}/include/stm32_arch.h ${CMAKE_SOURCE_DIR}/README.md)

if( ${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Darwin" )
  set(SOS_TOOLCHAIN_CMAKE_PATH /Applications/StratifyLabs-SDK/Tools/gcc/arm-none-eabi/cmake)
endif()
if( ${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Windows" )
  set(SOS_TOOLCHAIN_CMAKE_PATH C:/StratifyLabs-SDK/Tools/gcc/arm-none-eabi/cmake)
endif()
set(CMAKE_TOOLCHAIN_FILE ${SOS_TOOLCHAIN_CMAKE_PATH}/sos-lib-toolchain.cmake)
set(SOS_LIB_NAME sos)
project(${SOS_LIB_NAME} C ASM)

set(F401xC 0)
set(F401xE 0)
set(F411 0)
set(F412 0)
set(F417 1)
set(F429 0)
set(F446 0)
set(F722 0)
set(F723 0)
set(F746 0)
set(F767 0)

set(L475 0)
set(L432 0)

if(F401xC)
set(STM32_VARIANT stm32f401xc)
set(STM32_VARIANT_DEFINE STM32F401xC)
include(${CMAKE_SOURCE_DIR}/stm32f4.cmake)
endif()

if(F401xE)
set(STM32_VARIANT stm32f401xe)
set(STM32_VARIANT_DEFINE STM32F401xE)
include(${CMAKE_SOURCE_DIR}/stm32f4.cmake)
endif()

if(F411)
set(STM32_VARIANT stm32f411xe)
set(STM32_VARIANT_DEFINE STM32F411xE)
include(${CMAKE_SOURCE_DIR}/stm32f4.cmake)
endif()

if(F412)
set(STM32_VARIANT stm32f412zx)
set(STM32_VARIANT_DEFINE STM32F412Zx)
include(${CMAKE_SOURCE_DIR}/stm32f4.cmake)
endif()

if(F417)
set(STM32_VARIANT stm32f417xx)
set(STM32_VARIANT_DEFINE STM32F417xx)
include(${CMAKE_SOURCE_DIR}/stm32f4.cmake)
endif()

if(F429)
set(STM32_VARIANT stm32f429xx)
set(STM32_VARIANT_DEFINE STM32F429xx)
include(${CMAKE_SOURCE_DIR}/stm32f4.cmake)
endif()

if(F446)
set(STM32_VARIANT stm32f446xx)
set(STM32_VARIANT_DEFINE STM32F446xx)
include(${CMAKE_SOURCE_DIR}/stm32f4.cmake)
endif()

if(F722)
set(STM32_VARIANT stm32f722xx)
set(STM32_VARIANT_DEFINE STM32F722xx)
set(STM32_ARCH_FPU v7em_f5sh)
include(${CMAKE_SOURCE_DIR}/stm32f7.cmake)
endif()

if(F723)
set(STM32_VARIANT stm32f723xx)
set(STM32_VARIANT_DEFINE STM32F723xx)
set(STM32_ARCH_FPU v7em_f5sh)
include(${CMAKE_SOURCE_DIR}/stm32f7.cmake)
endif()

if(F746)
set(STM32_VARIANT stm32f746xx)
set(STM32_VARIANT_DEFINE STM32F746xx)
set(STM32_ARCH_FPU v7em_f5sh)
include(${CMAKE_SOURCE_DIR}/stm32f7.cmake)
endif()

if(F767)
set(STM32_VARIANT stm32f767xx)
set(STM32_VARIANT_DEFINE STM32F767xx)
set(STM32_ARCH_FPU v7em_f5dh)
include(${CMAKE_SOURCE_DIR}/stm32f7.cmake)
endif()

if(L475)
set(STM32_VARIANT stm32l475xx)
set(STM32_VARIANT_DEFINE STM32L475xx)
include(${CMAKE_SOURCE_DIR}/stm32l4.cmake)
endif()

if(L432)
set(STM32_VARIANT stm32l432xx)
set(STM32_VARIANT_DEFINE STM32L432xx)
include(${CMAKE_SOURCE_DIR}/stm32l4.cmake)
endif()


file(GLOB STM32F3XX_HEADERS ${CMAKE_SOURCE_DIR}/src/stm32f3xx/*.h)
file(GLOB STM32F4XX_HEADERS ${CMAKE_SOURCE_DIR}/src/stm32f4xx/*.h)
file(GLOB STM32F7XX_HEADERS ${CMAKE_SOURCE_DIR}/src/stm32f7xx/*.h)

install(FILES ${STM32F3XX_HEADERS} DESTINATION include/mcu/arch/stm32/stm32f3xx)
install(FILES ${STM32F4XX_HEADERS} DESTINATION include/mcu/arch/stm32/stm32f4xx)
install(FILES ${STM32F7XX_HEADERS} DESTINATION include/mcu/arch/stm32/stm32f7xx)
install(DIRECTORY include/ DESTINATION include/mcu/arch/stm32)
install(DIRECTORY ldscript/ DESTINATION lib/ldscripts)
